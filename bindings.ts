// This file has been generated by Specta. DO NOT EDIT.

import {
    createTauRPCProxy as createProxy,
    type InferCommandOutput,
} from "taurpc";
type TAURI_CHANNEL<T> = (response: T) => void;

export type Alert = {
    id?: Identifier;
    parent?: Identifier | null;
    content: string;
    level?: AlertLevel;
    title?: string | null;
};

export type AlertLevel = "default" | "info" | "success" | "warning" | "error";

export type Collapsible = {
    id?: Identifier;
    parent?: Identifier | null;
    children: Identifier[];
    default_collapsed: boolean;
    title: string;
    icon?: string | null;
};

export type ColorScheme = "light" | "dark";

export type Columns = {
    id?: Identifier;
    parent?: Identifier | null;
    children: Identifier[];
    columns: Identifier[][];
};

export type ContainerNode =
    | ({ node_kind: "columns" } & Columns)
    | ({ node_kind: "collapsible" } & Collapsible)
    | ({ node_kind: "labelled_group" } & LabelledGroup)
    | ({ node_kind: "wrapper" } & Wrapper);

export type CreateProjectModel = {
    path: string;
    name: string;
    description?: string | null;
};

export type FieldNode =
    | ({ node_kind: "text_field" } & TextField)
    | ({ node_kind: "number_field" } & NumberField)
    | ({ node_kind: "switch" } & Switch)
    | ({ node_kind: "single_select" } & SingleSelect)
    | ({ node_kind: "multi_select" } & MultiSelect)
    | ({ node_kind: "rich_text" } & RichText)
    | ({ node_kind: "linked_document" } & LinkedDocument)
    | ({ node_kind: "multi_linked_documents" } & MultiLinkedDocuments);

export type Identifier = string;

export type JsonValue =
    | null
    | boolean
    | number
    | string
    | JsonValue[]
    | Partial<{ [key in string]: JsonValue }>;

export type LabelledGroup = {
    id?: Identifier;
    parent?: Identifier | null;
    children: Identifier[];
    label: string;
    icon?: string | null;
};

export type LinkedDocument = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    constraints?: MatchCriteria[] | null;
};

export type MatchCriteria =
    | { template_id: Identifier; key: string; value: JsonValue }
    | { template_id: Identifier };

export type MultiLinkedDocuments = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    constraints?: MatchCriteria[] | null;
    max_selections?: number | null;
};

export type MultiSelect = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    placeholder?: string | null;
    default_value?: string[] | null;
    options: string[];
    max_selections?: number | null;
};

export type Node =
    | ({ node_category: "other" } & OtherNode)
    | ({ node_category: "container" } & ContainerNode)
    | ({ node_category: "field" } & FieldNode);

export type NumberField = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    placeholder?: string | null;
    allow_negatives?: boolean;
    allow_decimals?: boolean;
    minimum?: number | null;
    maximum?: number | null;
    default_value?: number | null;
};

export type OtherNode =
    | ({ node_kind: "text" } & Text)
    | ({ node_kind: "alert" } & Alert);

export type PredefinedLayout =
    | "rich_document"
    | "interactable_map"
    | "calendar"
    | "timeline";

export type ProjectConfiguration = {
    name: string;
    description?: string | null;
    current_tabs?: string[];
    created_on: string;
    last_access: string;
};

export type RichText = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
};

export type SerializableError =
    | { err: "unhandled"; context: string }
    | { err: "io"; context: string }
    | { err: "zip"; context: string }
    | { err: "non_empty_project_folder"; context: string }
    | { err: "expected_project_directory"; context: string }
    | { err: "json_encoding"; context: string }
    | { err: "database_error"; context: string }
    | { err: "no_active_project" }
    | { err: "invalid_project_selection"; context: string }
    | { err: "corrupted_project"; context: string }
    | { err: "tauri_error"; context: string }
    | {
          err: "invalid_cast";
          context: { value_type: ValueType; expected_type: string };
      }
    | {
          err: "invalid_cast_datatype";
          context: { value_type: ValueType; value: JsonValue };
      };

export type SingleSelect = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    placeholder?: string | null;
    default_value?: string | null;
    options: string[];
};

export type State = {
    current_project: string | null;
    color_scheme: ColorScheme;
    sidebar_width: number;
    resource_manager_sidebar_width: number;
};

export type StateKey =
    | "current_project"
    | "color_scheme"
    | "sidebar_width"
    | "resource_manager_sidebar_width";

export type StateValue =
    | { key: "current_project"; value: string | null }
    | { key: "color_scheme"; value: ColorScheme }
    | { key: "sidebar_width"; value: number }
    | { key: "resource_manager_sidebar_width"; value: number };

export type Switch = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    on_icon?: string | null;
    off_icon?: string | null;
    default_value?: boolean | null;
};

export type Template = {
    id?: Identifier;
    friendly_id: string;
    name: string;
    icon?: string | null;
    description?: string | null;
    nodes?: Partial<{ [key in string]: Node }>;
    layout: TemplateLayout;
};

export type TemplateLayout =
    | {
          layout: "predefined";
          header_root_children: Identifier[];
          layout_type: PredefinedLayout;
      }
    | {
          layout: "form";
          inherit: Identifier | null;
          root_children: Identifier[];
      };

export type Text = {
    id?: Identifier;
    parent?: Identifier | null;
    content: string;
};

export type TextField = {
    id?: Identifier;
    parent?: Identifier | null;
    key: string;
    label?: string | null;
    icon?: string | null;
    help_text?: string | null;
    placeholder?: string | null;
    default_value?: string | null;
};

export type ValueType =
    | { kind: "optional"; contained: ValueType }
    | { kind: "boolean" }
    | { kind: "number" }
    | { kind: "string" }
    | { kind: "array"; elements: ValueType }
    | { kind: "object"; elements: ValueType }
    | { kind: "opaque" }
    | { kind: "identifier" };

export type Wrapper = {
    id?: Identifier;
    parent?: Identifier | null;
    children: Identifier[];
};

const ARGS_MAP = {
    application:
        '{"closed_project":[],"create_project":["project"],"exit_project":[],"full_state":[],"get_state":["key"],"open_project":["path"],"opened_project":["path","config"],"project_config":[],"project_directory":[],"set_state":["value"],"updated_state":["new_state"]}',
    "application.icons":
        '{"all_icons":[],"icon":["icon"],"icon_categories":[],"icons":["icons"],"icons_in_category":["category"]}',
    templates: '{"get_template":["id"]}',
};
export type Router = {
    application: {
        closed_project: () => Promise<void>;
        create_project: (
            project: CreateProjectModel,
        ) => Promise<ProjectConfiguration>;
        exit_project: () => Promise<null>;
        full_state: () => Promise<State>;
        get_state: (key: StateKey) => Promise<StateValue | null>;
        open_project: (path: string) => Promise<ProjectConfiguration>;
        opened_project: (
            path: string,
            config: ProjectConfiguration,
        ) => Promise<void>;
        project_config: () => Promise<ProjectConfiguration>;
        project_directory: () => Promise<string | null>;
        set_state: (value: StateValue) => Promise<null>;
        updated_state: (newState: State) => Promise<void>;
    };
    "application.icons": {
        all_icons: () => Promise<string[]>;
        icon: (icon: string) => Promise<string | null>;
        icon_categories: () => Promise<string[]>;
        icons: (
            icons: string[],
        ) => Promise<Partial<{ [key in string]: string | null }>>;
        icons_in_category: (category: string) => Promise<string[] | null>;
    };
    templates: { get_template: (id: string) => Promise<Template | null> };
};

export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP);
export type { InferCommandOutput };
